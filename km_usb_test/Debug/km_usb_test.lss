
km_usb_test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000896  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010e  00802000  00000896  0000092c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000092  0080210e  0080210e  00000a3a  2**2
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000a3a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a6c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000aac  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00006112  00000000  00000000  00000c1c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003a10  00000000  00000000  00006d2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f43  00000000  00000000  0000a73e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003ac  00000000  00000000  0000b684  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00003e7a  00000000  00000000  0000ba30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a59  00000000  00000000  0000f8aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000148  00000000  00000000  00010303  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 42 01 	jmp	0x284	; 0x284 <__ctors_end>
   4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
   8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
   c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  10:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  14:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  18:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  1c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  20:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  24:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  28:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  2c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  30:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  34:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  38:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  3c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  40:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  44:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  48:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  4c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  50:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  54:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  58:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  5c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  60:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  64:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  68:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  6c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  70:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  74:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  78:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  7c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  80:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  84:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  88:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  8c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  90:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  94:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  98:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  9c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  a0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  a4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  a8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  ac:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  b0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  b4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  b8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  bc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  c0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  c4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  c8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  cc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  d0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  d4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  d8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  dc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  e0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  e4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  e8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  ec:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  f0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  f4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  f8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
  fc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 100:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 104:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 108:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 10c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 110:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 114:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 118:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 11c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 120:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 124:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 128:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 12c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 130:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 134:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 138:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 13c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 140:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 144:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 148:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 14c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 150:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 154:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 158:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 15c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 160:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 164:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 168:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 16c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 170:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 174:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 178:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 17c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 180:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 184:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 188:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 18c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 190:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 194:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 198:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 19c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1a0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1a4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1a8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1ac:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1b0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1b4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1b8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1bc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1c0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1c4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1c8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1cc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1d0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1d4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1d8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1dc:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1e0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1e4:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1e8:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1ec:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1f0:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__bad_interrupt>
 1f4:	0c 94 ab 03 	jmp	0x756	; 0x756 <__vector_125>
 1f8:	0c 94 f5 03 	jmp	0x7ea	; 0x7ea <__vector_126>

000001fc <__trampolines_end>:
 1fc:	12 03       	mulsu	r17, r18
 1fe:	4d 00       	.word	0x004d	; ????
 200:	53 00       	.word	0x0053	; ????
 202:	46 00       	.word	0x0046	; ????
 204:	54 00       	.word	0x0054	; ????
 206:	31 00       	.word	0x0031	; ????
 208:	30 00       	.word	0x0030	; ????
 20a:	30 00       	.word	0x0030	; ????
 20c:	22 00       	.word	0x0022	; ????
	...

00000210 <product_string>:
 210:	1e 03 45 00 78 00 61 00 6d 00 70 00 6c 00 65 00     ..E.x.a.m.p.l.e.
 220:	20 00 44 00 65 00 76 00 69 00 63 00 65 00 00 00      .D.e.v.i.c.e...

00000230 <manufacturer_string>:
 230:	1c 03 4e 00 6f 00 6e 00 6f 00 6c 00 69 00 74 00     ..N.o.n.o.l.i.t.
 240:	68 00 20 00 4c 00 61 00 62 00 73 00 00 00           h. .L.a.b.s...

0000024e <language_string>:
 24e:	04 03 09 04                                         ....

00000252 <configuration_descriptor>:
 252:	09 02 20 00 01 01 00 80 fa 09 04 00 00 02 ff 00     .. .............
 262:	00 00 07 05 81 02 40 00 00 07 05 02 02 40 00 00     ......@......@..

00000272 <device_descriptor>:
 272:	12 01 00 02 00 00 00 40 99 99 34 00 00 01 01 02     .......@..4.....
 282:	00 01                                               ..

00000284 <__ctors_end>:
 284:	11 24       	eor	r1, r1
 286:	1f be       	out	0x3f, r1	; 63
 288:	cf ef       	ldi	r28, 0xFF	; 255
 28a:	cd bf       	out	0x3d, r28	; 61
 28c:	df e3       	ldi	r29, 0x3F	; 63
 28e:	de bf       	out	0x3e, r29	; 62
 290:	00 e0       	ldi	r16, 0x00	; 0
 292:	0c bf       	out	0x3c, r16	; 60

00000294 <__do_copy_data>:
 294:	11 e2       	ldi	r17, 0x21	; 33
 296:	a0 e0       	ldi	r26, 0x00	; 0
 298:	b0 e2       	ldi	r27, 0x20	; 32
 29a:	e6 e9       	ldi	r30, 0x96	; 150
 29c:	f8 e0       	ldi	r31, 0x08	; 8
 29e:	00 e0       	ldi	r16, 0x00	; 0
 2a0:	0b bf       	out	0x3b, r16	; 59
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <__do_copy_data+0x14>
 2a4:	07 90       	elpm	r0, Z+
 2a6:	0d 92       	st	X+, r0
 2a8:	ae 30       	cpi	r26, 0x0E	; 14
 2aa:	b1 07       	cpc	r27, r17
 2ac:	d9 f7       	brne	.-10     	; 0x2a4 <__do_copy_data+0x10>

000002ae <__do_clear_bss>:
 2ae:	21 e2       	ldi	r18, 0x21	; 33
 2b0:	ae e0       	ldi	r26, 0x0E	; 14
 2b2:	b1 e2       	ldi	r27, 0x21	; 33
 2b4:	01 c0       	rjmp	.+2      	; 0x2b8 <.do_clear_bss_start>

000002b6 <.do_clear_bss_loop>:
 2b6:	1d 92       	st	X+, r1

000002b8 <.do_clear_bss_start>:
 2b8:	a0 3a       	cpi	r26, 0xA0	; 160
 2ba:	b2 07       	cpc	r27, r18
 2bc:	e1 f7       	brne	.-8      	; 0x2b6 <.do_clear_bss_loop>
 2be:	0e 94 e1 01 	call	0x3c2	; 0x3c2 <main>
 2c2:	0c 94 49 04 	jmp	0x892	; 0x892 <_exit>

000002c6 <__bad_interrupt>:
 2c6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002ca <usb_cb_get_descriptor>:
};
*/



uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** ptr) {
 2ca:	0f 93       	push	r16
 2cc:	1f 93       	push	r17
 2ce:	cf 93       	push	r28
 2d0:	df 93       	push	r29
 2d2:	8a 01       	movw	r16, r20
	const void* address = NULL;
	uint16_t size    = 0;

	switch (type) {
 2d4:	82 30       	cpi	r24, 0x02	; 2
 2d6:	49 f0       	breq	.+18     	; 0x2ea <usb_cb_get_descriptor+0x20>
 2d8:	83 30       	cpi	r24, 0x03	; 3
 2da:	61 f0       	breq	.+24     	; 0x2f4 <usb_cb_get_descriptor+0x2a>
 2dc:	81 30       	cpi	r24, 0x01	; 1
 2de:	19 f5       	brne	.+70     	; 0x326 <usb_cb_get_descriptor+0x5c>
		case USB_DTYPE_Device:
			address = &device_descriptor;
			size    = sizeof(USB_DeviceDescriptor);
 2e0:	c2 e1       	ldi	r28, 0x12	; 18
 2e2:	d0 e0       	ldi	r29, 0x00	; 0
	const void* address = NULL;
	uint16_t size    = 0;

	switch (type) {
		case USB_DTYPE_Device:
			address = &device_descriptor;
 2e4:	82 e7       	ldi	r24, 0x72	; 114
 2e6:	92 e0       	ldi	r25, 0x02	; 2
 2e8:	22 c0       	rjmp	.+68     	; 0x32e <usb_cb_get_descriptor+0x64>
			size    = sizeof(USB_DeviceDescriptor);
			break;
		case USB_DTYPE_Configuration:
			address = &configuration_descriptor;
 2ea:	82 e5       	ldi	r24, 0x52	; 82
 2ec:	92 e0       	ldi	r25, 0x02	; 2
			size    = sizeof(ConfigDesc);
 2ee:	c0 e2       	ldi	r28, 0x20	; 32
 2f0:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 2f2:	1d c0       	rjmp	.+58     	; 0x32e <usb_cb_get_descriptor+0x64>
		case USB_DTYPE_String:
			switch (index) {
 2f4:	61 30       	cpi	r22, 0x01	; 1
 2f6:	59 f0       	breq	.+22     	; 0x30e <usb_cb_get_descriptor+0x44>
 2f8:	38 f0       	brcs	.+14     	; 0x308 <usb_cb_get_descriptor+0x3e>
 2fa:	62 30       	cpi	r22, 0x02	; 2
 2fc:	59 f0       	breq	.+22     	; 0x314 <usb_cb_get_descriptor+0x4a>
 2fe:	6e 3e       	cpi	r22, 0xEE	; 238
 300:	61 f4       	brne	.+24     	; 0x31a <usb_cb_get_descriptor+0x50>
					break;
				case 0x02:
					address = &product_string;
					break;
				case 0xEE:
					address = &msft_string;
 302:	8c ef       	ldi	r24, 0xFC	; 252
 304:	91 e0       	ldi	r25, 0x01	; 1
					break;
 306:	0b c0       	rjmp	.+22     	; 0x31e <usb_cb_get_descriptor+0x54>
			size    = sizeof(ConfigDesc);
			break;
		case USB_DTYPE_String:
			switch (index) {
				case 0x00:
					address = &language_string;
 308:	8e e4       	ldi	r24, 0x4E	; 78
 30a:	92 e0       	ldi	r25, 0x02	; 2
					break;
 30c:	08 c0       	rjmp	.+16     	; 0x31e <usb_cb_get_descriptor+0x54>
				case 0x01:
					address = &manufacturer_string;
 30e:	80 e3       	ldi	r24, 0x30	; 48
 310:	92 e0       	ldi	r25, 0x02	; 2
					break;
 312:	05 c0       	rjmp	.+10     	; 0x31e <usb_cb_get_descriptor+0x54>
				case 0x02:
					address = &product_string;
 314:	80 e1       	ldi	r24, 0x10	; 16
 316:	92 e0       	ldi	r25, 0x02	; 2
					break;
 318:	02 c0       	rjmp	.+4      	; 0x31e <usb_cb_get_descriptor+0x54>
*/



uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** ptr) {
	const void* address = NULL;
 31a:	80 e0       	ldi	r24, 0x00	; 0
 31c:	90 e0       	ldi	r25, 0x00	; 0
					break;
				case 0xEE:
					address = &msft_string;
					break;
			}
			size = pgm_read_byte(&((USB_StringDescriptor*)address)->bLength);
 31e:	fc 01       	movw	r30, r24
 320:	c4 91       	lpm	r28, Z
 322:	d0 e0       	ldi	r29, 0x00	; 0
			break;
 324:	04 c0       	rjmp	.+8      	; 0x32e <usb_cb_get_descriptor+0x64>



uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** ptr) {
	const void* address = NULL;
	uint16_t size    = 0;
 326:	c0 e0       	ldi	r28, 0x00	; 0
 328:	d0 e0       	ldi	r29, 0x00	; 0
*/



uint16_t usb_cb_get_descriptor(uint8_t type, uint8_t index, const uint8_t** ptr) {
	const void* address = NULL;
 32a:	80 e0       	ldi	r24, 0x00	; 0
 32c:	90 e0       	ldi	r25, 0x00	; 0
			}
			size = pgm_read_byte(&((USB_StringDescriptor*)address)->bLength);
			break;
	}

	*ptr = usb_ep0_from_progmem(address, size);
 32e:	be 01       	movw	r22, r28
 330:	0e 94 2c 03 	call	0x658	; 0x658 <usb_ep0_from_progmem>
 334:	f8 01       	movw	r30, r16
 336:	80 83       	st	Z, r24
 338:	91 83       	std	Z+1, r25	; 0x01
	return size;
}
 33a:	ce 01       	movw	r24, r28
 33c:	df 91       	pop	r29
 33e:	cf 91       	pop	r28
 340:	1f 91       	pop	r17
 342:	0f 91       	pop	r16
 344:	08 95       	ret

00000346 <usb_cb_reset>:
 346:	08 95       	ret

00000348 <usb_cb_set_configuration>:

void usb_cb_reset(void) {

}

bool usb_cb_set_configuration(uint8_t config) {
 348:	91 e0       	ldi	r25, 0x01	; 1
 34a:	82 30       	cpi	r24, 0x02	; 2
 34c:	08 f0       	brcs	.+2      	; 0x350 <usb_cb_set_configuration+0x8>
 34e:	90 e0       	ldi	r25, 0x00	; 0
	if (config <= 1) {
		return true;
	} else {
		return false;
	}
}
 350:	89 2f       	mov	r24, r25
 352:	08 95       	ret

00000354 <usb_cb_completion>:
 354:	08 95       	ret

00000356 <handle_msft_compatible>:


void handle_msft_compatible(void) {
	const uint8_t *data;
	uint16_t len;
	if (usb_setup.wIndex == 0x0005) {
 356:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <usb_setup+0x4>
 35a:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <usb_setup+0x5>
 35e:	85 30       	cpi	r24, 0x05	; 5
 360:	91 05       	cpc	r25, r1
 362:	21 f0       	breq	.+8      	; 0x36c <handle_msft_compatible+0x16>
		len = msft_extended.dwLength;
		data = (const uint8_t *)&msft_extended;
	} else if (usb_setup.wIndex == 0x0004) {
 364:	04 97       	sbiw	r24, 0x04	; 4
 366:	39 f0       	breq	.+14     	; 0x376 <handle_msft_compatible+0x20>
		len = msft_compatible.dwLength;
		data = (const uint8_t *)&msft_compatible;
	} else {
		return usb_ep0_stall();
 368:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <usb_ep0_stall>

void handle_msft_compatible(void) {
	const uint8_t *data;
	uint16_t len;
	if (usb_setup.wIndex == 0x0005) {
		len = msft_extended.dwLength;
 36c:	32 ec       	ldi	r19, 0xC2	; 194
 36e:	20 e0       	ldi	r18, 0x00	; 0
		data = (const uint8_t *)&msft_extended;
 370:	60 e2       	ldi	r22, 0x20	; 32
 372:	70 e2       	ldi	r23, 0x20	; 32
 374:	04 c0       	rjmp	.+8      	; 0x37e <handle_msft_compatible+0x28>
	} else if (usb_setup.wIndex == 0x0004) {
		len = msft_compatible.dwLength;
 376:	38 e2       	ldi	r19, 0x28	; 40
 378:	20 e0       	ldi	r18, 0x00	; 0
		data = (const uint8_t *)&msft_compatible;
 37a:	64 ee       	ldi	r22, 0xE4	; 228
 37c:	70 e2       	ldi	r23, 0x20	; 32
	} else {
		return usb_ep0_stall();
	}
	if (len > usb_setup.wLength) {
 37e:	80 91 5b 21 	lds	r24, 0x215B	; 0x80215b <usb_setup+0x6>
 382:	90 91 5c 21 	lds	r25, 0x215C	; 0x80215c <usb_setup+0x7>
		len = usb_setup.wLength;
	}
	usb_ep_start_in(0x80, data, len, true);
 386:	43 2f       	mov	r20, r19
 388:	52 2f       	mov	r21, r18
 38a:	84 17       	cp	r24, r20
 38c:	95 07       	cpc	r25, r21
 38e:	08 f4       	brcc	.+2      	; 0x392 <handle_msft_compatible+0x3c>
 390:	ac 01       	movw	r20, r24
 392:	21 e0       	ldi	r18, 0x01	; 1
 394:	80 e8       	ldi	r24, 0x80	; 128
 396:	0e 94 3d 03 	call	0x67a	; 0x67a <usb_ep_start_in>
	usb_ep0_out();
 39a:	0c 94 6d 03 	jmp	0x6da	; 0x6da <usb_ep0_out>

0000039e <usb_cb_control_setup>:
}

void usb_cb_control_setup(void) {
	uint8_t recipient = usb_setup.bmRequestType & USB_REQTYPE_RECIPIENT_MASK;
 39e:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <usb_setup>
 3a2:	8f 71       	andi	r24, 0x1F	; 31
	if (recipient == USB_RECIPIENT_DEVICE) {
 3a4:	11 f0       	breq	.+4      	; 0x3aa <usb_cb_control_setup+0xc>
		switch(usb_setup.bRequest) {
			case WCID_REQUEST_ID:
				return handle_msft_compatible();
		}
	} else if (recipient == USB_RECIPIENT_INTERFACE) {
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	31 f4       	brne	.+12     	; 0x3b6 <usb_cb_control_setup+0x18>
		switch(usb_setup.bRequest) {
 3aa:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <usb_setup+0x1>
 3ae:	82 32       	cpi	r24, 0x22	; 34
 3b0:	11 f4       	brne	.+4      	; 0x3b6 <usb_cb_control_setup+0x18>
			case WCID_REQUEST_ID:
				return handle_msft_compatible();
 3b2:	0c 94 ab 01 	jmp	0x356	; 0x356 <handle_msft_compatible>
		}
	}
	return usb_ep0_stall();
 3b6:	0c 94 7c 03 	jmp	0x6f8	; 0x6f8 <usb_ep0_stall>

000003ba <usb_cb_control_in_completion>:
 3ba:	08 95       	ret

000003bc <usb_cb_control_out_completion>:

void usb_cb_control_in_completion(void) {

}

void usb_cb_control_out_completion(void) {
 3bc:	08 95       	ret

000003be <usb_cb_set_interface>:

}

bool usb_cb_set_interface(uint16_t interface, uint16_t altsetting) {
	return false;
}
 3be:	80 e0       	ldi	r24, 0x00	; 0
 3c0:	08 95       	ret

000003c2 <main>:

USB_ENDPOINTS(1);

int main(void)
{
	usb_configure_clock();
 3c2:	0e 94 85 03 	call	0x70a	; 0x70a <usb_configure_clock>

	PORTCFG.CLKEVOUT = PORTCFG_CLKOUTSEL_CLK1X_gc | PORTCFG_CLKOUT_PC7_gc;
 3c6:	81 e0       	ldi	r24, 0x01	; 1
 3c8:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__TEXT_REGION_LENGTH__+0x7000b4>
	PORTC.DIRSET = PIN7_bm;
 3cc:	80 e8       	ldi	r24, 0x80	; 128
 3ce:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
	//for(;;);

	// Enable USB interrupts
	USB.INTCTRLA = /*USB_SOFIE_bm |*/ USB_BUSEVIE_bm | USB_INTLVL_MED_gc;
 3d2:	82 e4       	ldi	r24, 0x42	; 66
 3d4:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <__TEXT_REGION_LENGTH__+0x7004c8>
	USB.INTCTRLB = USB_TRNIE_bm | USB_SETUPIE_bm;
 3d8:	83 e0       	ldi	r24, 0x03	; 3
 3da:	80 93 c9 04 	sts	0x04C9, r24	; 0x8004c9 <__TEXT_REGION_LENGTH__+0x7004c9>

	usb_init();
 3de:	0e 94 11 03 	call	0x622	; 0x622 <usb_init>

	USB.CTRLA |= USB_FIFOEN_bm;
 3e2:	80 91 c0 04 	lds	r24, 0x04C0	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>
 3e6:	80 62       	ori	r24, 0x20	; 32
 3e8:	80 93 c0 04 	sts	0x04C0, r24	; 0x8004c0 <__TEXT_REGION_LENGTH__+0x7004c0>

	PMIC.CTRL = PMIC_LOLVLEN_bm | PMIC_MEDLVLEN_bm | PMIC_HILVLEN_bm;
 3ec:	87 e0       	ldi	r24, 0x07	; 7
 3ee:	80 93 a2 00 	sts	0x00A2, r24	; 0x8000a2 <__TEXT_REGION_LENGTH__+0x7000a2>
	sei();
 3f2:	78 94       	sei

	usb_attach();
 3f4:	0e 94 67 03 	call	0x6ce	; 0x6ce <usb_attach>
 3f8:	ff cf       	rjmp	.-2      	; 0x3f8 <main+0x36>

000003fa <usb_ep0_in_multi>:
volatile uint8_t usb_configuration;

uint16_t usb_ep0_in_size;
const uint8_t* usb_ep0_in_ptr;

void usb_ep0_in_multi(void) {
 3fa:	cf 93       	push	r28
 3fc:	df 93       	push	r29
	uint16_t tsize = usb_ep0_in_size;
 3fe:	c0 91 51 21 	lds	r28, 0x2151	; 0x802151 <usb_ep0_in_size>
 402:	d0 91 52 21 	lds	r29, 0x2152	; 0x802152 <usb_ep0_in_size+0x1>
 406:	c1 34       	cpi	r28, 0x41	; 65
 408:	d1 05       	cpc	r29, r1
 40a:	10 f0       	brcs	.+4      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 40c:	c0 e4       	ldi	r28, 0x40	; 64
 40e:	d0 e0       	ldi	r29, 0x00	; 0

	if (tsize > USB_EP0_SIZE) {
		tsize = USB_EP0_SIZE;
	}

	memcpy(ep0_buf_in, usb_ep0_in_ptr, tsize);
 410:	60 91 53 21 	lds	r22, 0x2153	; 0x802153 <usb_ep0_in_ptr>
 414:	70 91 54 21 	lds	r23, 0x2154	; 0x802154 <usb_ep0_in_ptr+0x1>
 418:	ae 01       	movw	r20, r28
 41a:	80 e1       	ldi	r24, 0x10	; 16
 41c:	91 e2       	ldi	r25, 0x21	; 33
 41e:	0e 94 40 04 	call	0x880	; 0x880 <memcpy>
	usb_ep_start_in(0x80, ep0_buf_in, tsize, false);
 422:	20 e0       	ldi	r18, 0x00	; 0
 424:	ae 01       	movw	r20, r28
 426:	60 e1       	ldi	r22, 0x10	; 16
 428:	71 e2       	ldi	r23, 0x21	; 33
 42a:	80 e8       	ldi	r24, 0x80	; 128
 42c:	0e 94 3d 03 	call	0x67a	; 0x67a <usb_ep_start_in>

	if (tsize == 0) {
 430:	20 97       	sbiw	r28, 0x00	; 0
 432:	11 f4       	brne	.+4      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
		usb_ep0_out();
 434:	0e 94 6d 03 	call	0x6da	; 0x6da <usb_ep0_out>
	}

	usb_ep0_in_size -= tsize;
 438:	80 91 51 21 	lds	r24, 0x2151	; 0x802151 <usb_ep0_in_size>
 43c:	90 91 52 21 	lds	r25, 0x2152	; 0x802152 <usb_ep0_in_size+0x1>
 440:	8c 1b       	sub	r24, r28
 442:	9d 0b       	sbc	r25, r29
 444:	80 93 51 21 	sts	0x2151, r24	; 0x802151 <usb_ep0_in_size>
 448:	90 93 52 21 	sts	0x2152, r25	; 0x802152 <usb_ep0_in_size+0x1>
	usb_ep0_in_ptr += tsize;
 44c:	80 91 53 21 	lds	r24, 0x2153	; 0x802153 <usb_ep0_in_ptr>
 450:	90 91 54 21 	lds	r25, 0x2154	; 0x802154 <usb_ep0_in_ptr+0x1>
 454:	c8 0f       	add	r28, r24
 456:	d9 1f       	adc	r29, r25
 458:	c0 93 53 21 	sts	0x2153, r28	; 0x802153 <usb_ep0_in_ptr>
 45c:	d0 93 54 21 	sts	0x2154, r29	; 0x802154 <usb_ep0_in_ptr+0x1>
}
 460:	df 91       	pop	r29
 462:	cf 91       	pop	r28
 464:	08 95       	ret

00000466 <usb_handle_setup>:

void usb_handle_setup(void){
 466:	cf 93       	push	r28
 468:	df 93       	push	r29
 46a:	1f 92       	push	r1
 46c:	1f 92       	push	r1
 46e:	cd b7       	in	r28, 0x3d	; 61
 470:	de b7       	in	r29, 0x3e	; 62
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD){
 472:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <usb_setup>
 476:	80 76       	andi	r24, 0x60	; 96
 478:	09 f0       	breq	.+2      	; 0x47c <usb_handle_setup+0x16>
 47a:	82 c0       	rjmp	.+260    	; 0x580 <usb_handle_setup+0x11a>
		switch (usb_setup.bRequest){
 47c:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <usb_setup+0x1>
 480:	85 30       	cpi	r24, 0x05	; 5
 482:	09 f4       	brne	.+2      	; 0x486 <usb_handle_setup+0x20>
 484:	74 c0       	rjmp	.+232    	; 0x56e <usb_handle_setup+0x108>
 486:	40 f4       	brcc	.+16     	; 0x498 <usb_handle_setup+0x32>
 488:	81 30       	cpi	r24, 0x01	; 1
 48a:	09 f4       	brne	.+2      	; 0x48e <usb_handle_setup+0x28>
 48c:	70 c0       	rjmp	.+224    	; 0x56e <usb_handle_setup+0x108>
 48e:	90 f0       	brcs	.+36     	; 0x4b4 <usb_handle_setup+0x4e>
 490:	83 30       	cpi	r24, 0x03	; 3
 492:	09 f4       	brne	.+2      	; 0x496 <usb_handle_setup+0x30>
 494:	6c c0       	rjmp	.+216    	; 0x56e <usb_handle_setup+0x108>
 496:	71 c0       	rjmp	.+226    	; 0x57a <usb_handle_setup+0x114>
 498:	88 30       	cpi	r24, 0x08	; 8
 49a:	09 f4       	brne	.+2      	; 0x49e <usb_handle_setup+0x38>
 49c:	48 c0       	rjmp	.+144    	; 0x52e <usb_handle_setup+0xc8>
 49e:	18 f4       	brcc	.+6      	; 0x4a6 <usb_handle_setup+0x40>
 4a0:	86 30       	cpi	r24, 0x06	; 6
 4a2:	71 f0       	breq	.+28     	; 0x4c0 <usb_handle_setup+0x5a>
 4a4:	6a c0       	rjmp	.+212    	; 0x57a <usb_handle_setup+0x114>
 4a6:	89 30       	cpi	r24, 0x09	; 9
 4a8:	09 f4       	brne	.+2      	; 0x4ac <usb_handle_setup+0x46>
 4aa:	47 c0       	rjmp	.+142    	; 0x53a <usb_handle_setup+0xd4>
 4ac:	8b 30       	cpi	r24, 0x0B	; 11
 4ae:	09 f4       	brne	.+2      	; 0x4b2 <usb_handle_setup+0x4c>
 4b0:	52 c0       	rjmp	.+164    	; 0x556 <usb_handle_setup+0xf0>
 4b2:	63 c0       	rjmp	.+198    	; 0x57a <usb_handle_setup+0x114>
			case USB_REQ_GetStatus:
				ep0_buf_in[0] = 0;
 4b4:	10 92 10 21 	sts	0x2110, r1	; 0x802110 <ep0_buf_in>
				ep0_buf_in[1] = 0;
 4b8:	10 92 11 21 	sts	0x2111, r1	; 0x802111 <ep0_buf_in+0x1>
				usb_ep0_in(2);
 4bc:	82 e0       	ldi	r24, 0x02	; 2
 4be:	58 c0       	rjmp	.+176    	; 0x570 <usb_handle_setup+0x10a>
			case USB_REQ_SetAddress:
				usb_ep0_in(0);
				return usb_ep0_out();

			case USB_REQ_GetDescriptor: {
				uint8_t type = (usb_setup.wValue >> 8);
 4c0:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <usb_setup+0x2>
 4c4:	80 91 58 21 	lds	r24, 0x2158	; 0x802158 <usb_setup+0x3>
				uint8_t index = (usb_setup.wValue & 0xFF);
				const uint8_t* descriptor = 0;
 4c8:	19 82       	std	Y+1, r1	; 0x01
 4ca:	1a 82       	std	Y+2, r1	; 0x02
				uint16_t size = usb_cb_get_descriptor(type, index, &descriptor);
 4cc:	ae 01       	movw	r20, r28
 4ce:	4f 5f       	subi	r20, 0xFF	; 255
 4d0:	5f 4f       	sbci	r21, 0xFF	; 255
 4d2:	0e 94 65 01 	call	0x2ca	; 0x2ca <usb_cb_get_descriptor>

				if (size && descriptor){
 4d6:	00 97       	sbiw	r24, 0x00	; 0
 4d8:	09 f4       	brne	.+2      	; 0x4dc <usb_handle_setup+0x76>
 4da:	4f c0       	rjmp	.+158    	; 0x57a <usb_handle_setup+0x114>
 4dc:	29 81       	ldd	r18, Y+1	; 0x01
 4de:	3a 81       	ldd	r19, Y+2	; 0x02
 4e0:	21 15       	cp	r18, r1
 4e2:	31 05       	cpc	r19, r1
 4e4:	09 f4       	brne	.+2      	; 0x4e8 <usb_handle_setup+0x82>
 4e6:	49 c0       	rjmp	.+146    	; 0x57a <usb_handle_setup+0x114>
					if (size > usb_setup.wLength) {
 4e8:	60 91 5b 21 	lds	r22, 0x215B	; 0x80215b <usb_setup+0x6>
 4ec:	70 91 5c 21 	lds	r23, 0x215C	; 0x80215c <usb_setup+0x7>
 4f0:	ac 01       	movw	r20, r24
 4f2:	68 17       	cp	r22, r24
 4f4:	79 07       	cpc	r23, r25
 4f6:	08 f4       	brcc	.+2      	; 0x4fa <usb_handle_setup+0x94>
 4f8:	ab 01       	movw	r20, r22
						size = usb_setup.wLength;
					}

					if (descriptor == ep0_buf_in) {
 4fa:	81 e2       	ldi	r24, 0x21	; 33
 4fc:	20 31       	cpi	r18, 0x10	; 16
 4fe:	38 07       	cpc	r19, r24
 500:	59 f4       	brne	.+22     	; 0x518 <usb_handle_setup+0xb2>
						usb_ep0_in_size = 0;
 502:	10 92 51 21 	sts	0x2151, r1	; 0x802151 <usb_ep0_in_size>
 506:	10 92 52 21 	sts	0x2152, r1	; 0x802152 <usb_ep0_in_size+0x1>
						usb_ep_start_in(0x80, ep0_buf_in, size, true);
 50a:	21 e0       	ldi	r18, 0x01	; 1
 50c:	60 e1       	ldi	r22, 0x10	; 16
 50e:	71 e2       	ldi	r23, 0x21	; 33
 510:	80 e8       	ldi	r24, 0x80	; 128
 512:	0e 94 3d 03 	call	0x67a	; 0x67a <usb_ep_start_in>
 516:	36 c0       	rjmp	.+108    	; 0x584 <usb_handle_setup+0x11e>
					} else {
						usb_ep0_in_size = size;
 518:	40 93 51 21 	sts	0x2151, r20	; 0x802151 <usb_ep0_in_size>
 51c:	50 93 52 21 	sts	0x2152, r21	; 0x802152 <usb_ep0_in_size+0x1>
						usb_ep0_in_ptr = descriptor;
 520:	20 93 53 21 	sts	0x2153, r18	; 0x802153 <usb_ep0_in_ptr>
 524:	30 93 54 21 	sts	0x2154, r19	; 0x802154 <usb_ep0_in_ptr+0x1>
						usb_ep0_in_multi();
 528:	0e 94 fd 01 	call	0x3fa	; 0x3fa <usb_ep0_in_multi>
 52c:	2b c0       	rjmp	.+86     	; 0x584 <usb_handle_setup+0x11e>
				} else {
					return usb_ep0_stall();
				}
			}
			case USB_REQ_GetConfiguration:
				ep0_buf_in[0] = usb_configuration;
 52e:	80 91 50 21 	lds	r24, 0x2150	; 0x802150 <usb_configuration>
 532:	80 93 10 21 	sts	0x2110, r24	; 0x802110 <ep0_buf_in>
				usb_ep0_in(1);
 536:	81 e0       	ldi	r24, 0x01	; 1
 538:	1b c0       	rjmp	.+54     	; 0x570 <usb_handle_setup+0x10a>
				return usb_ep0_out();

			case USB_REQ_SetConfiguration:
				if (usb_cb_set_configuration((uint8_t)usb_setup.wValue)) {
 53a:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <usb_setup+0x2>
 53e:	0e 94 a4 01 	call	0x348	; 0x348 <usb_cb_set_configuration>
 542:	88 23       	and	r24, r24
 544:	d1 f0       	breq	.+52     	; 0x57a <usb_handle_setup+0x114>
					usb_ep0_in(0);
 546:	80 e0       	ldi	r24, 0x00	; 0
 548:	0e 94 74 03 	call	0x6e8	; 0x6e8 <usb_ep0_in>
					usb_configuration = (uint8_t)(usb_setup.wValue);
 54c:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <usb_setup+0x2>
 550:	80 93 50 21 	sts	0x2150, r24	; 0x802150 <usb_configuration>
 554:	0f c0       	rjmp	.+30     	; 0x574 <usb_handle_setup+0x10e>
				} else {
					return usb_ep0_stall();
				}

			case USB_REQ_SetInterface:
				if (usb_cb_set_interface(usb_setup.wIndex, usb_setup.wValue)) {
 556:	60 91 57 21 	lds	r22, 0x2157	; 0x802157 <usb_setup+0x2>
 55a:	70 91 58 21 	lds	r23, 0x2158	; 0x802158 <usb_setup+0x3>
 55e:	80 91 59 21 	lds	r24, 0x2159	; 0x802159 <usb_setup+0x4>
 562:	90 91 5a 21 	lds	r25, 0x215A	; 0x80215a <usb_setup+0x5>
 566:	0e 94 df 01 	call	0x3be	; 0x3be <usb_cb_set_interface>
 56a:	88 23       	and	r24, r24
 56c:	31 f0       	breq	.+12     	; 0x57a <usb_handle_setup+0x114>
					usb_ep0_in(0);
 56e:	80 e0       	ldi	r24, 0x00	; 0
 570:	0e 94 74 03 	call	0x6e8	; 0x6e8 <usb_ep0_in>
					return usb_ep0_out();
 574:	0e 94 6d 03 	call	0x6da	; 0x6da <usb_ep0_out>
 578:	05 c0       	rjmp	.+10     	; 0x584 <usb_handle_setup+0x11e>
				} else {
					return usb_ep0_stall();
				}

			default:
				return usb_ep0_stall();
 57a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <usb_ep0_stall>
 57e:	02 c0       	rjmp	.+4      	; 0x584 <usb_handle_setup+0x11e>
		}
	}

	usb_cb_control_setup();
 580:	0e 94 cf 01 	call	0x39e	; 0x39e <usb_cb_control_setup>
}
 584:	0f 90       	pop	r0
 586:	0f 90       	pop	r0
 588:	df 91       	pop	r29
 58a:	cf 91       	pop	r28
 58c:	08 95       	ret

0000058e <usb_handle_control_out_complete>:

void usb_handle_control_out_complete(void) {
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
 58e:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <usb_setup>
 592:	80 76       	andi	r24, 0x60	; 96
 594:	11 f0       	breq	.+4      	; 0x59a <usb_handle_control_out_complete+0xc>
		// Let the status stage proceed
	} else {
		usb_cb_control_out_completion();
 596:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <usb_cb_control_out_completion>
 59a:	08 95       	ret

0000059c <usb_handle_control_in_complete>:
	}
}

void usb_handle_control_in_complete(void) {
	if ((usb_setup.bmRequestType & USB_REQTYPE_TYPE_MASK) == USB_REQTYPE_STANDARD) {
 59c:	80 91 55 21 	lds	r24, 0x2155	; 0x802155 <usb_setup>
 5a0:	80 76       	andi	r24, 0x60	; 96
 5a2:	71 f4       	brne	.+28     	; 0x5c0 <usb_handle_control_in_complete+0x24>
		switch (usb_setup.bRequest){
 5a4:	80 91 56 21 	lds	r24, 0x2156	; 0x802156 <usb_setup+0x1>
 5a8:	85 30       	cpi	r24, 0x05	; 5
 5aa:	19 f0       	breq	.+6      	; 0x5b2 <usb_handle_control_in_complete+0x16>
 5ac:	86 30       	cpi	r24, 0x06	; 6
 5ae:	31 f0       	breq	.+12     	; 0x5bc <usb_handle_control_in_complete+0x20>
 5b0:	08 95       	ret
			case USB_REQ_SetAddress:
				usb_set_address(usb_setup.wValue & 0x7F);
 5b2:	80 91 57 21 	lds	r24, 0x2157	; 0x802157 <usb_setup+0x2>
 5b6:	8f 77       	andi	r24, 0x7F	; 127
 5b8:	0c 94 29 03 	jmp	0x652	; 0x652 <usb_set_address>
				return;
			case USB_REQ_GetDescriptor:
				usb_ep0_in_multi();
 5bc:	0c 94 fd 01 	jmp	0x3fa	; 0x3fa <usb_ep0_in_multi>
				return;
		}
	} else {
		usb_cb_control_in_completion();
 5c0:	0c 94 dd 01 	jmp	0x3ba	; 0x3ba <usb_cb_control_in_completion>

000005c4 <CCPWrite>:
	usb_xmega_endpoints[0].out.CTRL |= USB_EP_STALL_bm;
	usb_xmega_endpoints[0].in.CTRL  |= USB_EP_STALL_bm;
}

void usb_set_speed(USB_Speed speed) { }
USB_Speed usb_get_speed() { return USB_SPEED_FULL; }
 5c4:	0f 93       	push	r16
 5c6:	9c 01       	movw	r18, r24
 5c8:	9f b7       	in	r25, 0x3f	; 63
 5ca:	f8 94       	cli
 5cc:	1b be       	out	0x3b, r1	; 59
 5ce:	f9 01       	movw	r30, r18
 5d0:	08 ed       	ldi	r16, 0xD8	; 216
 5d2:	04 bf       	out	0x34, r16	; 52
 5d4:	60 83       	st	Z, r22
 5d6:	9f bf       	out	0x3f, r25	; 63
 5d8:	0f 91       	pop	r16
 5da:	08 95       	ret

000005dc <usb_reset>:
 5dc:	81 e0       	ldi	r24, 0x01	; 1
 5de:	80 93 44 00 	sts	0x0044, r24	; 0x800044 <__TEXT_REGION_LENGTH__+0x700044>
 5e2:	e0 e0       	ldi	r30, 0x00	; 0
 5e4:	f0 e2       	ldi	r31, 0x20	; 32
 5e6:	a0 ec       	ldi	r26, 0xC0	; 192
 5e8:	b4 e0       	ldi	r27, 0x04	; 4
 5ea:	16 96       	adiw	r26, 0x06	; 6
 5ec:	ed 93       	st	X+, r30
 5ee:	fc 93       	st	X, r31
 5f0:	17 97       	sbiw	r26, 0x07	; 7
 5f2:	13 96       	adiw	r26, 0x03	; 3
 5f4:	1c 92       	st	X, r1
 5f6:	13 97       	sbiw	r26, 0x03	; 3
 5f8:	10 82       	st	Z, r1
 5fa:	83 e4       	ldi	r24, 0x43	; 67
 5fc:	81 83       	std	Z+1, r24	; 0x01
 5fe:	80 e6       	ldi	r24, 0x60	; 96
 600:	91 e2       	ldi	r25, 0x21	; 33
 602:	84 83       	std	Z+4, r24	; 0x04
 604:	95 83       	std	Z+5, r25	; 0x05
 606:	82 e0       	ldi	r24, 0x02	; 2
 608:	80 87       	std	Z+8, r24	; 0x08
 60a:	83 e6       	ldi	r24, 0x63	; 99
 60c:	81 87       	std	Z+9, r24	; 0x09
 60e:	80 e1       	ldi	r24, 0x10	; 16
 610:	91 e2       	ldi	r25, 0x21	; 33
 612:	84 87       	std	Z+12, r24	; 0x0c
 614:	95 87       	std	Z+13, r25	; 0x0d
 616:	80 91 0c 21 	lds	r24, 0x210C	; 0x80210c <usb_num_endpoints>
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 6c       	ori	r24, 0xC0	; 192
 61e:	8c 93       	st	X, r24
 620:	08 95       	ret

00000622 <usb_init>:
 622:	cf 93       	push	r28
 624:	df 93       	push	r29
 626:	c0 ec       	ldi	r28, 0xC0	; 192
 628:	d1 e0       	ldi	r29, 0x01	; 1
 62a:	82 e0       	ldi	r24, 0x02	; 2
 62c:	8a 87       	std	Y+10, r24	; 0x0a
 62e:	ea e1       	ldi	r30, 0x1A	; 26
 630:	f0 e0       	ldi	r31, 0x00	; 0
 632:	e4 91       	lpm	r30, Z
 634:	a0 ec       	ldi	r26, 0xC0	; 192
 636:	b4 e0       	ldi	r27, 0x04	; 4
 638:	da 96       	adiw	r26, 0x3a	; 58
 63a:	ec 93       	st	X, r30
 63c:	da 97       	sbiw	r26, 0x3a	; 58
 63e:	8a 87       	std	Y+10, r24	; 0x0a
 640:	eb e1       	ldi	r30, 0x1B	; 27
 642:	f0 e0       	ldi	r31, 0x00	; 0
 644:	e4 91       	lpm	r30, Z
 646:	db 96       	adiw	r26, 0x3b	; 59
 648:	ec 93       	st	X, r30
 64a:	df 91       	pop	r29
 64c:	cf 91       	pop	r28
 64e:	0c 94 ee 02 	jmp	0x5dc	; 0x5dc <usb_reset>

00000652 <usb_set_address>:
 652:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <__TEXT_REGION_LENGTH__+0x7004c3>
 656:	08 95       	ret

00000658 <usb_ep0_from_progmem>:
 658:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <__TEXT_REGION_LENGTH__+0x7001ca>
 65c:	a0 e1       	ldi	r26, 0x10	; 16
 65e:	b1 e2       	ldi	r27, 0x21	; 33
 660:	68 0f       	add	r22, r24
 662:	79 1f       	adc	r23, r25
 664:	fc 01       	movw	r30, r24
 666:	e6 17       	cp	r30, r22
 668:	f7 07       	cpc	r31, r23
 66a:	21 f0       	breq	.+8      	; 0x674 <usb_ep0_from_progmem+0x1c>
 66c:	84 91       	lpm	r24, Z
 66e:	8d 93       	st	X+, r24
 670:	31 96       	adiw	r30, 0x01	; 1
 672:	f9 cf       	rjmp	.-14     	; 0x666 <usb_ep0_from_progmem+0xe>
 674:	80 e1       	ldi	r24, 0x10	; 16
 676:	91 e2       	ldi	r25, 0x21	; 33
 678:	08 95       	ret

0000067a <usb_ep_start_in>:
 67a:	0f 93       	push	r16
 67c:	db 01       	movw	r26, r22
 67e:	38 2f       	mov	r19, r24
 680:	3f 73       	andi	r19, 0x3F	; 63
 682:	08 2e       	mov	r0, r24
 684:	00 0c       	add	r0, r0
 686:	99 0b       	sbc	r25, r25
 688:	79 2f       	mov	r23, r25
 68a:	77 1f       	adc	r23, r23
 68c:	77 27       	eor	r23, r23
 68e:	77 1f       	adc	r23, r23
 690:	80 e0       	ldi	r24, 0x00	; 0
 692:	e7 2f       	mov	r30, r23
 694:	f8 2f       	mov	r31, r24
 696:	e3 0f       	add	r30, r19
 698:	f1 1d       	adc	r31, r1
 69a:	e3 0f       	add	r30, r19
 69c:	f1 1d       	adc	r31, r1
 69e:	93 e0       	ldi	r25, 0x03	; 3
 6a0:	ee 0f       	add	r30, r30
 6a2:	ff 1f       	adc	r31, r31
 6a4:	9a 95       	dec	r25
 6a6:	e1 f7       	brne	.-8      	; 0x6a0 <usb_ep_start_in+0x26>
 6a8:	e0 50       	subi	r30, 0x00	; 0
 6aa:	f0 4e       	sbci	r31, 0xE0	; 224
 6ac:	a4 83       	std	Z+4, r26	; 0x04
 6ae:	b5 83       	std	Z+5, r27	; 0x05
 6b0:	16 82       	std	Z+6, r1	; 0x06
 6b2:	17 82       	std	Z+7, r1	; 0x07
 6b4:	30 e0       	ldi	r19, 0x00	; 0
 6b6:	33 27       	eor	r19, r19
 6b8:	26 95       	lsr	r18
 6ba:	37 95       	ror	r19
 6bc:	22 27       	eor	r18, r18
 6be:	24 2b       	or	r18, r20
 6c0:	35 2b       	or	r19, r21
 6c2:	22 83       	std	Z+2, r18	; 0x02
 6c4:	33 83       	std	Z+3, r19	; 0x03
 6c6:	02 e2       	ldi	r16, 0x22	; 34
 6c8:	06 93       	lac	Z, r16
 6ca:	0f 91       	pop	r16
 6cc:	08 95       	ret

000006ce <usb_attach>:
 6ce:	e0 ec       	ldi	r30, 0xC0	; 192
 6d0:	f4 e0       	ldi	r31, 0x04	; 4
 6d2:	81 81       	ldd	r24, Z+1	; 0x01
 6d4:	81 60       	ori	r24, 0x01	; 1
 6d6:	81 83       	std	Z+1, r24	; 0x01
 6d8:	08 95       	ret

000006da <usb_ep0_out>:
 6da:	0f 93       	push	r16
 6dc:	e0 e0       	ldi	r30, 0x00	; 0
 6de:	f0 e2       	ldi	r31, 0x20	; 32
 6e0:	02 e7       	ldi	r16, 0x72	; 114
 6e2:	06 93       	lac	Z, r16
 6e4:	0f 91       	pop	r16
 6e6:	08 95       	ret

000006e8 <usb_ep0_in>:
 6e8:	48 2f       	mov	r20, r24
 6ea:	50 e0       	ldi	r21, 0x00	; 0
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	60 e1       	ldi	r22, 0x10	; 16
 6f0:	71 e2       	ldi	r23, 0x21	; 33
 6f2:	80 e8       	ldi	r24, 0x80	; 128
 6f4:	0c 94 3d 03 	jmp	0x67a	; 0x67a <usb_ep_start_in>

000006f8 <usb_ep0_stall>:
 6f8:	e0 e0       	ldi	r30, 0x00	; 0
 6fa:	f0 e2       	ldi	r31, 0x20	; 32
 6fc:	81 81       	ldd	r24, Z+1	; 0x01
 6fe:	84 60       	ori	r24, 0x04	; 4
 700:	81 83       	std	Z+1, r24	; 0x01
 702:	81 85       	ldd	r24, Z+9	; 0x09
 704:	84 60       	ori	r24, 0x04	; 4
 706:	81 87       	std	Z+9, r24	; 0x09
 708:	08 95       	ret

0000070a <usb_configure_clock>:

void usb_configure_clock() {
#ifdef USB_USE_PLL
	OSC.XOSCCTRL = OSC_FRQRANGE_12TO16_gc | OSC_XOSCSEL_XTAL_16KCLK_gc;
 70a:	8b ec       	ldi	r24, 0xCB	; 203
 70c:	80 93 52 00 	sts	0x0052, r24	; 0x800052 <__TEXT_REGION_LENGTH__+0x700052>
	//CCP = CCP_IOREG_gc; //Security Signature to modify clock
    OSC.CTRL |= OSC_XOSCEN_bm;
 710:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 714:	88 60       	ori	r24, 0x08	; 8
 716:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_XOSCRDY_bm));
 71a:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 71e:	83 ff       	sbrs	r24, 3
 720:	fc cf       	rjmp	.-8      	; 0x71a <usb_configure_clock+0x10>

	OSC.PLLCTRL = OSC_PLLSRC_XOSC_gc | 3;		// 48MHz for USB
 722:	83 ec       	ldi	r24, 0xC3	; 195
 724:	80 93 55 00 	sts	0x0055, r24	; 0x800055 <__TEXT_REGION_LENGTH__+0x700055>
	OSC.CTRL |= OSC_PLLEN_bm;
 728:	80 91 50 00 	lds	r24, 0x0050	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 72c:	80 61       	ori	r24, 0x10	; 16
 72e:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
	while(!(OSC.STATUS & OSC_PLLRDY_bm));
 732:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x700051>
 736:	84 ff       	sbrs	r24, 4
 738:	fc cf       	rjmp	.-8      	; 0x732 <usb_configure_clock+0x28>

	CCPWrite(&CLK.PSCTRL, CLK_PSADIV_2_gc | CLK_PSBCDIV_1_1_gc);	// 24MHz CPU clock
 73a:	64 e0       	ldi	r22, 0x04	; 4
 73c:	81 e4       	ldi	r24, 0x41	; 65
 73e:	90 e0       	ldi	r25, 0x00	; 0
 740:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <CCPWrite>
	CCPWrite(&CLK.CTRL, CLK_SCLKSEL_PLL_gc);
 744:	64 e0       	ldi	r22, 0x04	; 4
 746:	80 e4       	ldi	r24, 0x40	; 64
 748:	90 e0       	ldi	r25, 0x00	; 0
 74a:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <CCPWrite>

	OSC.CTRL = OSC_XOSCEN_bm | OSC_PLLEN_bm;	// disable other clocks
 74e:	88 e1       	ldi	r24, 0x18	; 24
 750:	80 93 50 00 	sts	0x0050, r24	; 0x800050 <__TEXT_REGION_LENGTH__+0x700050>
 754:	08 95       	ret

00000756 <__vector_125>:
    CLK.CTRL = CLK_SCLKSEL_PLL_gc; // Select PLL
    CLK.PSCTRL = 0x00; // No peripheral clock prescaler
#endif
}

ISR(USB_BUSEVENT_vect){
 756:	1f 92       	push	r1
 758:	0f 92       	push	r0
 75a:	0f b6       	in	r0, 0x3f	; 63
 75c:	0f 92       	push	r0
 75e:	11 24       	eor	r1, r1
 760:	0b b6       	in	r0, 0x3b	; 59
 762:	0f 92       	push	r0
 764:	2f 93       	push	r18
 766:	3f 93       	push	r19
 768:	4f 93       	push	r20
 76a:	5f 93       	push	r21
 76c:	6f 93       	push	r22
 76e:	7f 93       	push	r23
 770:	8f 93       	push	r24
 772:	9f 93       	push	r25
 774:	af 93       	push	r26
 776:	bf 93       	push	r27
 778:	ef 93       	push	r30
 77a:	ff 93       	push	r31
	if (USB.INTFLAGSACLR & USB_SOFIF_bm){
 77c:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
 780:	87 ff       	sbrs	r24, 7
 782:	02 c0       	rjmp	.+4      	; 0x788 <__vector_125+0x32>
		USB.INTFLAGSACLR = USB_SOFIF_bm;
 784:	80 e8       	ldi	r24, 0x80	; 128
 786:	05 c0       	rjmp	.+10     	; 0x792 <__vector_125+0x3c>
	}else if (USB.INTFLAGSACLR & (USB_CRCIF_bm | USB_UNFIF_bm | USB_OVFIF_bm)){
 788:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
 78c:	8e 70       	andi	r24, 0x0E	; 14
 78e:	21 f0       	breq	.+8      	; 0x798 <__vector_125+0x42>
		USB.INTFLAGSACLR = (USB_CRCIF_bm | USB_UNFIF_bm | USB_OVFIF_bm);
 790:	8e e0       	ldi	r24, 0x0E	; 14
 792:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
 796:	16 c0       	rjmp	.+44     	; 0x7c4 <__vector_125+0x6e>
	}else if (USB.INTFLAGSACLR & USB_STALLIF_bm){
 798:	80 91 ca 04 	lds	r24, 0x04CA	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
 79c:	80 ff       	sbrs	r24, 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <__vector_125+0x4e>
		USB.INTFLAGSACLR = USB_STALLIF_bm;
 7a0:	81 e0       	ldi	r24, 0x01	; 1
 7a2:	f7 cf       	rjmp	.-18     	; 0x792 <__vector_125+0x3c>
	}else{
		USB.INTFLAGSACLR = USB_SUSPENDIF_bm | USB_RESUMEIF_bm | USB_RSTIF_bm;
 7a4:	80 e7       	ldi	r24, 0x70	; 112
 7a6:	80 93 ca 04 	sts	0x04CA, r24	; 0x8004ca <__TEXT_REGION_LENGTH__+0x7004ca>
		if (USB.STATUS & USB_BUSRST_bm){
 7aa:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <__TEXT_REGION_LENGTH__+0x7004c2>
 7ae:	80 ff       	sbrs	r24, 0
 7b0:	09 c0       	rjmp	.+18     	; 0x7c4 <__vector_125+0x6e>
			USB.STATUS &= ~USB_BUSRST_bm;
 7b2:	80 91 c2 04 	lds	r24, 0x04C2	; 0x8004c2 <__TEXT_REGION_LENGTH__+0x7004c2>
 7b6:	8e 7f       	andi	r24, 0xFE	; 254
 7b8:	80 93 c2 04 	sts	0x04C2, r24	; 0x8004c2 <__TEXT_REGION_LENGTH__+0x7004c2>
			usb_reset();
 7bc:	0e 94 ee 02 	call	0x5dc	; 0x5dc <usb_reset>
			usb_cb_reset();
 7c0:	0e 94 a3 01 	call	0x346	; 0x346 <usb_cb_reset>
		}
	}
}
 7c4:	ff 91       	pop	r31
 7c6:	ef 91       	pop	r30
 7c8:	bf 91       	pop	r27
 7ca:	af 91       	pop	r26
 7cc:	9f 91       	pop	r25
 7ce:	8f 91       	pop	r24
 7d0:	7f 91       	pop	r23
 7d2:	6f 91       	pop	r22
 7d4:	5f 91       	pop	r21
 7d6:	4f 91       	pop	r20
 7d8:	3f 91       	pop	r19
 7da:	2f 91       	pop	r18
 7dc:	0f 90       	pop	r0
 7de:	0b be       	out	0x3b, r0	; 59
 7e0:	0f 90       	pop	r0
 7e2:	0f be       	out	0x3f, r0	; 63
 7e4:	0f 90       	pop	r0
 7e6:	1f 90       	pop	r1
 7e8:	18 95       	reti

000007ea <__vector_126>:

ISR(USB_TRNCOMPL_vect){
 7ea:	1f 92       	push	r1
 7ec:	0f 92       	push	r0
 7ee:	0f b6       	in	r0, 0x3f	; 63
 7f0:	0f 92       	push	r0
 7f2:	11 24       	eor	r1, r1
 7f4:	0b b6       	in	r0, 0x3b	; 59
 7f6:	0f 92       	push	r0
 7f8:	0f 93       	push	r16
 7fa:	2f 93       	push	r18
 7fc:	3f 93       	push	r19
 7fe:	4f 93       	push	r20
 800:	5f 93       	push	r21
 802:	6f 93       	push	r22
 804:	7f 93       	push	r23
 806:	8f 93       	push	r24
 808:	9f 93       	push	r25
 80a:	af 93       	push	r26
 80c:	bf 93       	push	r27
 80e:	ef 93       	push	r30
 810:	ff 93       	push	r31
	USB.FIFOWP = 0;
 812:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <__TEXT_REGION_LENGTH__+0x7004c4>
	USB.INTFLAGSBCLR = USB_SETUPIF_bm | USB_TRNIF_bm;
 816:	83 e0       	ldi	r24, 0x03	; 3
 818:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <__TEXT_REGION_LENGTH__+0x7004cc>

	// Read once to prevent race condition where SETUP packet is interpreted as OUT
	uint8_t status = usb_xmega_endpoints[0].out.STATUS;
 81c:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__data_start>
	if (status & USB_EP_SETUP_bm){
 820:	84 ff       	sbrs	r24, 4
 822:	10 c0       	rjmp	.+32     	; 0x844 <__vector_126+0x5a>
		// TODO: race conditions because we can't block a setup packet
		LACR16(&(usb_xmega_endpoints[0].out.STATUS), USB_EP_TRNCOMPL0_bm | USB_EP_SETUP_bm);
 824:	e0 e0       	ldi	r30, 0x00	; 0
 826:	f0 e2       	ldi	r31, 0x20	; 32
 828:	00 e3       	ldi	r16, 0x30	; 48
 82a:	06 93       	lac	Z, r16
		memcpy(&usb_setup, ep0_buf_out, sizeof(usb_setup));
 82c:	88 e0       	ldi	r24, 0x08	; 8
 82e:	e0 e6       	ldi	r30, 0x60	; 96
 830:	f1 e2       	ldi	r31, 0x21	; 33
 832:	a5 e5       	ldi	r26, 0x55	; 85
 834:	b1 e2       	ldi	r27, 0x21	; 33
 836:	01 90       	ld	r0, Z+
 838:	0d 92       	st	X+, r0
 83a:	8a 95       	dec	r24
 83c:	e1 f7       	brne	.-8      	; 0x836 <__vector_126+0x4c>
		usb_handle_setup();
 83e:	0e 94 33 02 	call	0x466	; 0x466 <usb_handle_setup>
 842:	03 c0       	rjmp	.+6      	; 0x84a <__vector_126+0x60>
	}else if(status & USB_EP_TRNCOMPL0_bm){
 844:	85 fd       	sbrc	r24, 5
		usb_handle_control_out_complete();
 846:	0e 94 c7 02 	call	0x58e	; 0x58e <usb_handle_control_out_complete>
	}

	if (usb_xmega_endpoints[0].in.STATUS & USB_EP_TRNCOMPL0_bm) {
 84a:	80 91 08 20 	lds	r24, 0x2008	; 0x802008 <__data_start+0x8>
 84e:	85 fd       	sbrc	r24, 5
		usb_handle_control_in_complete();
 850:	0e 94 ce 02 	call	0x59c	; 0x59c <usb_handle_control_in_complete>
	}

	usb_cb_completion();
 854:	0e 94 aa 01 	call	0x354	; 0x354 <usb_cb_completion>
}
 858:	ff 91       	pop	r31
 85a:	ef 91       	pop	r30
 85c:	bf 91       	pop	r27
 85e:	af 91       	pop	r26
 860:	9f 91       	pop	r25
 862:	8f 91       	pop	r24
 864:	7f 91       	pop	r23
 866:	6f 91       	pop	r22
 868:	5f 91       	pop	r21
 86a:	4f 91       	pop	r20
 86c:	3f 91       	pop	r19
 86e:	2f 91       	pop	r18
 870:	0f 91       	pop	r16
 872:	0f 90       	pop	r0
 874:	0b be       	out	0x3b, r0	; 59
 876:	0f 90       	pop	r0
 878:	0f be       	out	0x3f, r0	; 63
 87a:	0f 90       	pop	r0
 87c:	1f 90       	pop	r1
 87e:	18 95       	reti

00000880 <memcpy>:
 880:	fb 01       	movw	r30, r22
 882:	dc 01       	movw	r26, r24
 884:	02 c0       	rjmp	.+4      	; 0x88a <memcpy+0xa>
 886:	01 90       	ld	r0, Z+
 888:	0d 92       	st	X+, r0
 88a:	41 50       	subi	r20, 0x01	; 1
 88c:	50 40       	sbci	r21, 0x00	; 0
 88e:	d8 f7       	brcc	.-10     	; 0x886 <memcpy+0x6>
 890:	08 95       	ret

00000892 <_exit>:
 892:	f8 94       	cli

00000894 <__stop_program>:
 894:	ff cf       	rjmp	.-2      	; 0x894 <__stop_program>
